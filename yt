#!/usr/bin/env bash
#A script written by Benexl in September 2024 under MIT LICENSE

# CLI_NAME=${0##*/}
CLI_NAME="yt-x"

CLI_CONFIG_DIR="${XDG_CONFIG_HOME:-"$HOME"/.config}/$CLI_NAME"
CLI_EXTENSION_DIR="$CLI_CONFIG_DIR/extensions"
CLI_CACHE_DIR="${XDG_CACHE_HOME:-"$HOME"/.cache}/$CLI_NAME"
CLI_PREVIEW_IMAGES_CACHE_DIR="$CLI_CACHE_DIR/preview_images"
CLI_YT_DLP_ARCHIVE="$CLI_CACHE_DIR/yt-dlp-archive"
CLI_AUTO_GEN_PLAYLISTS="$CLI_CACHE_DIR/playlists"
CLI_PREVIEW_SCRIPTS_DIR="$CLI_CACHE_DIR/preview_text"
[ -d "$CLI_CONFIG_DIR" ] || mkdir -p "$CLI_CONFIG_DIR"
[ -d "$CLI_EXTENSION_DIR" ] || mkdir -p "$CLI_EXTENSION_DIR"
[ -d "$CLI_PREVIEW_IMAGES_CACHE_DIR" ] || mkdir -p "$CLI_PREVIEW_IMAGES_CACHE_DIR"
[ -d "$CLI_PREVIEW_SCRIPTS_DIR" ] || mkdir -p "$CLI_PREVIEW_SCRIPTS_DIR"
[ -d "$CLI_YT_DLP_ARCHIVE" ] || mkdir -p "$CLI_YT_DLP_ARCHIVE"
[ -d "$CLI_AUTO_GEN_PLAYLISTS" ] || mkdir -p "$CLI_AUTO_GEN_PLAYLISTS"

case "$(uname -a)" in
*ndroid) PLATFORM="android" ;;
*Darwin*) PLATFORM="mac" ;;
*MINGW* | *WSL2*) PLATFORM="windows" ;;
*) PLATFORM="linux" ;;
esac

find_config_option() {
    local option=$1
    awk -F': ' "/^$option:/ && !/#/ {print \$2}" "$CLI_CONFIG_DIR/${CLI_NAME}.conf"
}

function load_config() {
    PRETTY_PRINT=true
    PREFERRED_SELECTOR=fzf
    ENABLE_PREVIEW=true
    IMAGE_RENDERER=chafa
    NO_OF_SEARCH_RESULTS=50
    NOTIFICATION_DURATION=5
    DOWNLOAD_DIRECTORY=/media/personal/videos
    PLAYLIST_START="1"
    PLAYLIST_END="$NO_OF_SEARCH_RESULTS"

    [ -d "$DOWNLOAD_DIRECTORY" ] || mkdir -p "$DOWNLOAD_DIRECTORY"

    FZF_DEFAULT_OPTS=${YT_X_FZF_OPTS:-'
    --color=fg:#d0d0d0,fg+:#d0d0d0,bg:#121212,bg+:#262626
    --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#87ff00
    --color=prompt:#d7005f,spinner:#af5fff,pointer:#af5fff,header:#87afaf
    --color=border:#262626,label:#aeaeae,query:#d9d9d9
    --border="rounded" --border-label="" --preview-window="border-rounded" --prompt="> "
    --marker=">" --pointer="◆" --separator="─" --scrollbar="│"
    '}

    init_pretty_print

    export FZF_DEFAULT_OPTS PRETTY_PRINT PLATFORM IMAGE_RENDERER
}

send_notification() {
    echo "$1" >&2 && sleep "$NOTIFICATION_DURATION"
}

update_script() {
    yt_x_path="$(command -v yt-x)"
    if [ -z "$yt_x_path" ]; then
        send_notification "Can't find yt-x in PATH"
        exit 1
    fi

    if [ ! -w "$yt_x_path" ]; then
        if [ -n "$(command -v sudo)" ]; then
            exec sudo -s "$yt_x_path" "-u"
        else
            send_notification "Insufficient permissions to update and can't find sudo in PATH"
            exit 1
        fi
    fi

    update=$(curl -s "https://raw.githubusercontent.com/Benexl/yt-x/refs/heads/master/yt-x" || byebye 1)
    update="$(printf '%s\n' "$update" | diff -u "$yt_x_path" - 2>/dev/null)"
    if [ -z "$update" ]; then
        send_notification "Script is up to date :)"
    else
        if printf '%s\n' "$update" | patch "$yt_x_path" -; then
            send_notification "Script has been updated!"
        else
            send_notification "Can't update for some reason!"
        fi
    fi
    exec "$yt_x_path"
}

# adapted from the preview script in the fzf repo
fzf_preview() {
    file=$1

    dim=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}
    if [ "$dim" = x ]; then
        dim=$(stty size </dev/tty | awk "{print \$2 \"x\" \$1}")
    fi
    if ! [ "$IMAGE_RENDERER" = "icat" ] && [ -z "$KITTY_WINDOW_ID" ] && [ "$((FZF_PREVIEW_TOP + FZF_PREVIEW_LINES))" -eq "$(stty size </dev/tty | awk "{print \$1}")" ]; then
        dim=${FZF_PREVIEW_COLUMNS}x$((FZF_PREVIEW_LINES - 1))
    fi

    if command -v chafa >/dev/null 2>&1; then
        case "$PLATFORM" in
        android) chafa -s "$dim" "$file" ;;
        windows) chafa -f sixel -s "$dim" "$file" ;;
        *) chafa -s "$dim" "$file" ;;
        esac
        echo
    else
        echo please install a terminal image viewer
        echo either icat for kitty terminal and wezterm or imgcat or chafa
    fi
}

confirm() {
    if command -v "gum" >/dev/null 2>&1; then
        gum confirm "$1"
    else
        printf "%s [y/N]: " "$1" >/dev/stderr
        read -r CONFIRMED
        case "$CONFIRMED" in
        y | Y)
            return 0
            ;;
        *)
            return 1
            ;;
        esac
    fi
}

launcher() {
    fzf \
        --info=hidden \
        --layout=reverse \
        --height=100% \
        --prompt="${1}: " \
        --exact --cycle --ansi
}

generate_sha256() {
    local input

    # Check if input is passed as an argument or piped
    if [ -n "$1" ]; then
        input="$1"
    else
        input=$(cat)
    fi

    if command -v sha256sum &>/dev/null; then
        echo -n "$input" | sha256sum | awk '{print $1}'
    elif command -v shasum &>/dev/null; then
        echo -n "$input" | shasum -a 256 | awk '{print $1}'
    elif command -v sha256 &>/dev/null; then
        echo -n "$input" | sha256 | awk '{print $1}'
    elif command -v openssl &>/dev/null; then
        echo -n "$input" | openssl dgst -sha256 | awk '{print $2}'
    else
        echo -n "$input" | base64 | tr '/+' '_-' | tr -d '\n'
    fi
}

generate_text_preview() {
    [ -z "$search_results" ] && return 1
    ids="$(echo "$1" | jq '.entries[].id' -r 2>/dev/null)"

    lines="$(echo "$ids" | wc -l)"
    for i in $(seq 1 "$lines"); do
        video=$(echo "$1" | jq ".entries[$((i - 1))]")
        title=$(echo "$video" | jq ".title" -r | sed 's/"/\\\\"/g;s/%/%%/g;s/\$/\\\\$/g;s/^.. //g')
        id=$(echo "$video" | jq '.id' -r)
        preview_image=$(echo "$video" | jq '.thumbnails[-1].url' -r | generate_sha256)

        view_count=$(
            echo "$video" | jq -r '
      .view_count
      |tostring
      |split("")
      |reverse
      |join("")
      |gsub("(?<thousands>[0-9]{3})(?=[0-9])"; "\(.thousands),")
      |split("")
      |reverse
      |join("")
      '
        )

        live_status=$(echo "$video" | jq '.live_status' -r)
        [ "$live_status" = "is_live" ] && live_status='Online'
        [ "$live_status" = "was_live" ] && live_status='Offline'
        [ "$live_status" = "null" ] && live_status='False'

        description=$(echo "$video" | jq '.description' -r | sed "s/\"//g;s/%//g")
        channel=$(echo "$video" | jq '.channel' -r)

        # some duration calculations
        duration=$(echo "$video" | jq '
    try 
      if .duration>=3600 then
        if .duration/3600|floor == 1 then 
          .duration/3600|floor|tostring + " hour" 
        else 
          .duration/3600|floor|tostring + " hours" 
        end 
      elif .duration>=60 then
        if .duration/60|floor == 1 then 
          .duration/60|floor|tostring + " min" 
        else 
          .duration/60|floor|tostring + " mins" 
        end 
      else 
        if .duration == 1 then 
          .duration/1|floor|tostring + " sec" 
        else 
          .duration/1|floor|tostring + " secs" 
        end 
      end
    catch
      "Unknown" 
    ' -r)

        # some date calculations
        timestamp=$(echo "$video" | jq '.timestamp' -r)
        relative_timestamp=$(("$CURRENT_TIME" - "$timestamp"))
        if [ "$relative_timestamp" -lt 60 ]; then
            timestamp="just now"
        elif [ "$relative_timestamp" -lt 3600 ]; then
            timestamp=$((relative_timestamp / 60))
            if [ "$timestamp" -eq 1 ]; then
                timestamp="$timestamp minute ago"
            else
                timestamp="$timestamp minutes ago"
            fi
        elif [ "$relative_timestamp" -lt 86400 ]; then
            timestamp=$((relative_timestamp / 3600))
            if [ "$relative_timestamp" -lt 7200 ]; then
                timestamp="1 hour ago"
            else
                timestamp=$((relative_timestamp / 3600))
                timestamp="$timestamp hours ago"
            fi
        elif [ "$relative_timestamp" -lt 604800 ]; then
            timestamp=$((relative_timestamp / 86400))
            if [ "$timestamp" -eq 1 ]; then
                timestamp="$timestamp day ago"
            else
                timestamp="$timestamp days ago"
            fi
        elif [ "$relative_timestamp" -lt 2635200 ]; then
            timestamp=$((relative_timestamp / 604800))
            if [ "$timestamp" -eq 1 ]; then
                timestamp="$timestamp week ago"
            else
                timestamp="$timestamp weeks ago"
            fi
        elif [ "$relative_timestamp" -lt 31622400 ]; then
            timestamp=$((relative_timestamp / 2635200))
            if [ "$timestamp" -eq 1 ]; then
                timestamp="$timestamp month ago"
            else
                timestamp="$timestamp months ago"
            fi
        else
            timestamp=$((relative_timestamp / 31622400))
            if [ "$timestamp" -eq 1 ]; then
                timestamp="$timestamp year ago"
            else
                timestamp="$timestamp years ago"
            fi
        fi

        printf "

if [ -f \"$CLI_PREVIEW_IMAGES_CACHE_DIR/${preview_image}.jpg\" ];then fzf_preview \"$CLI_PREVIEW_IMAGES_CACHE_DIR/${preview_image}.jpg\" 2>/dev/null;
else echo loading preview image...;
fi
ll=1
while [ \$ll -le \$FZF_PREVIEW_COLUMNS ];do echo -n -e \"─\" ;(( ll++ ));done;
echo

echo \"$title\"

ll=1
while [ \$ll -le \$FZF_PREVIEW_COLUMNS ];do echo -n -e \"─\" ;(( ll++ ));done;
printf \"${MAGENTA}${BOLD}Channel: ${RESET}$channel\n\";
printf \"${MAGENTA}${BOLD}Duration: ${RESET}$duration\n\";
printf \"${MAGENTA}${BOLD}View Count: ${RESET}$view_count views\n\";
printf \"${MAGENTA}${BOLD}Live Status: ${RESET}$live_status\n\";
printf \"${MAGENTA}${BOLD}Uploaded: ${RESET}$timestamp\n\";

ll=1
while [ \$ll -le \$FZF_PREVIEW_COLUMNS ];do echo -n -e \"─\" ;(( ll++ ));done;
echo


! [ \"$description\" = \"null\" ] && echo -n \"%s\";

" "$description" >"$CLI_PREVIEW_SCRIPTS_DIR/$(echo "$video" | jq ".title" -r | generate_sha256).txt"

    done
}

download_preview_images() {
    local url video filename

    echo generating preview in the background...
    generate_text_preview "$1" &

    ids="$(echo "$1" | jq '.entries[].id' -r 2>/dev/null)"
    urls="$(echo "$1" | jq '.entries[].thumbnails[-1].url' -r 2>/dev/null)"
    [ -z "$ids" ] && return 1
    [ -z "$urls" ] && return 1

    [ -f "$CLI_PREVIEW_IMAGES_CACHE_DIR/previews.txt" ] && rm "$CLI_PREVIEW_IMAGES_CACHE_DIR/previews.txt"
    lines="$(echo "$ids" | wc -l)"
    for i in $(seq 1 "$lines"); do
        video=$(echo "$1" | jq ".entries[$((i - 1))]")
        url=$(echo "$urls" | head -n $i | tail -n 1)
        filename=$(echo "$url" | generate_sha256)
        if ! [ -s "$CLI_PREVIEW_IMAGES_CACHE_DIR/${filename}.jpg" ]; then
            echo "url = \"${2}${url}\"" >>"$CLI_PREVIEW_IMAGES_CACHE_DIR/previews.txt"
            echo "output = \"$CLI_PREVIEW_IMAGES_CACHE_DIR/${filename}.jpg\"" >>"$CLI_PREVIEW_IMAGES_CACHE_DIR/previews.txt"
        fi
    done
    curl -s -K "$CLI_PREVIEW_IMAGES_CACHE_DIR/previews.txt" 2>/dev/null &
}

function launcher_with_preview() {
    fzf \
        --info=hidden \
        --layout=reverse \
        --height=100% \
        --prompt="${1}: " \
        --preview-window=left,35%,wrap --bind=right:accept \
        --expect=shift-left,shift-right --tabstop=1 \
        --cycle --exact \
        --ansi --preview="$2"
}

init_pretty_print() {
    if [ "$PRETTY_PRINT" = "true" ]; then
        RED=$(tput setaf 1)
        MAGENTA="\x1b[38;2;215;0;95m"
        CYAN=$(tput setaf 6)
        BOLD=$(tput bold)
        RESET=$(tput sgr0)
    fi
}

byebye() {
    clear
    echo "Have a good day $USER"
    exit "${1:-0}"
}

function prompt() {
    printf "%s: " "$1" >/dev/stderr
    read -r VAL
    echo "$VAL"
}

run_yt_dlp() {
    if command -v "gum" >/dev/null 2>&1; then
        gum spin --show-output -- yt-dlp "$1" -J --flat-playlist --extractor-args youtubetab:approximate_date --playlist-start "$PLAYLIST_START" --playlist-end "$PLAYLIST_END" $PREFERRED_BROWSER || send_notification "Failed to fetch data : ("
    else
        echo "Loading..." >/dev/stderr
        yt-dlp "$1" -J --flat-playlist --extractor-args youtubetab:approximate_date --playlist-start "$PLAYLIST_START" --playlist-end "$PLAYLIST_END" $PREFERRED_BROWSER || send_notification "Failed to fetch data : ("
    fi
}

core_dep_ch() {
    ! command -v "yt-dlp" >/dev/null 2>&1 && echo yt-dlp is not installed and is a core dep please install it to proceed && exit 1
    ! command -v "jq" >/dev/null 2>&1 && echo jq is not installed and is a core dep please install it to proceed && exit 1
    ! command -v "fzf" >/dev/null 2>&1 && echo fzf is not installed and is a core dep please install it to proceed && exit 1
}

trap byebye INT TERM
PREVIEW_SCRIPT_FOR_VIDEOS="

  title={}
  id=\$(echo {} | generate_sha256)
  if  [ -f \"$CLI_PREVIEW_SCRIPTS_DIR/\${id}.txt\" ];then
    . \"$CLI_PREVIEW_SCRIPTS_DIR/\${id}.txt\";
  else
    echo Loading Preview...
  fi
"

playlist_explorer() {
    SHELL="bash"
    DOWNLOAD_IMAGES=0
    while true; do
        [ "$DOWNLOAD_IMAGES" = 0 ] &&
            search_results=$(echo "$search_results" | jq "
          .entries=(.entries 
          | to_entries
          | map(.value.title=\"\(.key+1|tostring| if (.|length) < 2 then \"0\" + . else . end) \"+.value.title) 
          |map(.value))
          ") && ! [ "$ENABLE_PREVIEW" = "true" ] || ! [ "$PREFERRED_SELECTOR" = "fzf" ] && DOWNLOAD_IMAGES=1
        titles=$(echo "$search_results" | jq '.entries[].title' -r 2>/dev/null)
        [ "$ENABLE_PREVIEW" = "true" ] && [ "$PREFERRED_SELECTOR" = "fzf" ] && [ "$DOWNLOAD_IMAGES" = 0 ] && download_preview_images "$search_results" "" && DOWNLOAD_IMAGES=1
        export search_results SHELL
        if [ "$ENABLE_PREVIEW" = "true" ]; then
            title="$(printf "%s\nNext\nPrevious\n${CYAN}󰌍${RESET}  Back\n${CYAN}󰍜${RESET}  Main Menu\n${RED}󰈆${RESET}  Exit" "$titles" | launcher_with_preview "select video" "$PREVIEW_SCRIPT_FOR_VIDEOS" | tr -d '\n' | sed 's/^[^0-9]  //g')"
        else
            title="$(printf "%s\nNext\nPrevious\nBack\nMain Menu\nExit" "$titles" | launcher "select video" | tr -d '\n' | sed 's/^[^0-9]  //g')"
        fi
        clear
        title="$(echo "$title" | sed 's/"/\\"/g')"
        case "$title" in
        Next)
            PLAYLIST_START=$((PLAYLIST_START + "$NO_OF_SEARCH_RESULTS"))
            PLAYLIST_END=$((PLAYLIST_END + "$NO_OF_SEARCH_RESULTS"))
            search_results=$(run_yt_dlp "$url")
            DOWNLOAD_IMAGES=0
            continue
            ;;
        Previous)
            PLAYLIST_START=$((PLAYLIST_START - "$NO_OF_SEARCH_RESULTS"))
            [ $PLAYLIST_START -le 0 ] && PLAYLIST_START=1
            PLAYLIST_END=$((PLAYLIST_END - "$NO_OF_SEARCH_RESULTS"))
            [ $PLAYLIST_END -le "$NO_OF_SEARCH_RESULTS" ] && PLAYLIST_END="$NO_OF_SEARCH_RESULTS"
            search_results=$(run_yt_dlp "$url")
            DOWNLOAD_IMAGES=0
            continue
            ;;
        "Main Menu")
            break
            ;;
        Back | "")
            break
            ;;
        Exit)
            byebye
            ;;
        esac
        id=$(echo "$title" | sed -E 's/^([0-9]+) .*/\1/g')
        video="$(echo "$search_results" | jq ".entries[$((id - 1))]")"
        title=$(echo "$video" | jq '.title' -r | sed 's/^[0-9]\+ //g')

        # download the video
        video_url=$(echo "$video" | jq '.url' -r)
        yt-dlp "$video_url" --output "$DOWNLOAD_DIRECTORY/%(title)s.%(ext)s" $PREFERRED_BROWSER
        send_notification "Completed downloading of $title"
    done
    unset urlForAll
    unset search_results
    PLAYLIST_START="1"
    PLAYLIST_END="$NO_OF_SEARCH_RESULTS"
}

main() {
    SHELL="bash"

    clear
    unset urlForAll
    if [ -z "$CMD_SEARCH_TERMS" ]; then
        search_term="$(prompt "Enter term to search for")"
        if [[ "$search_term" =~ ^![0-9]{1,2}$ ]]; then
            index="${search_term:1}" # remove the leading "!"
            history_item=$(tail -n 10 "$CLI_CACHE_DIR/search_history.txt" | tac | sed -n "${index}p")
            if [[ -n "$history_item" ]]; then
                echo "Using history item #$index: $history_item"
                search_term="$history_item"
            else
                echo "No such history item: $index"
            fi
        fi
        # Exit if user presses ESC or leaves search empty in rofi
        if [ "$PREFERRED_SELECTOR" = "rofi" ] && [ -z "$search_term" ]; then
            echo "Search cancelled. No search term provided."
            return 1
        fi
    else
        search_term="$CMD_SEARCH_TERMS"
        unset CMD_SEARCH_TERMS
    fi
    if [[ "$search_term" =~ ^(:[a-z]+)[[:space:]]+(.+) ]]; then
        search_filter="${BASH_REMATCH[1]}"
        search_term="${BASH_REMATCH[2]}"
        case "$search_filter" in
        ":hour") sp="EgIIAQ%253D%253D" ;;
        ":today") sp="EgIIAg%253D%253D" ;;
        ":week") sp="EgIIAw%253D%253D" ;;
        ":month") sp="EgIIBA%253D%253D" ;;
        ":year") sp="EgIIBQ%253D%253D" ;;
        ":video") sp="EgIQAQ%253D%253D" ;;
        ":movie") sp="EgIQBA%253D%253D" ;;
        ":live") sp="EgJAAQ%253D%253D" ;;
        ":short") sp="EgQQARgB" ;;
        ":long") sp="EgQQARgC" ;;
        ":4k") sp="EgJwAQ%253D%253D" ;;
        ":hd") sp="EgIgAQ%253D%253D" ;;
        ":subtitles") sp="EgIoAQ%253D%253D" ;;
        ":360") sp="EgJ4AQ%253D%253D" ;;
        ":vr") sp="EgLIAQ%253D%253D" ;;
        ":3d") sp="EgI4AQ%253D%253D" ;;
        ":hdr") sp="EgPIAQ%253D%253D" ;;
        ":local") sp="EgO4AQ%253D%253D" ;;
        ":newest") sp="CAISAhAB" ;;
        ":views") sp="CAMSAhAB" ;;
        ":rating") sp="CAESAhAB" ;;
        *) sp="EgIQAQ%253D%253D" ;;
        esac
    fi

    search_term=$(echo "$search_term" | jq -Rr '@uri')
    url="https://www.youtube.com/results?search_query=$search_term&sp=$sp"
    search_results=$(run_yt_dlp "$url")
    playlist_explorer

    main
}

load_config
core_dep_ch

export -f generate_sha256 fzf_preview

main
